// This file was generated by Dashcode from Apple Inc.
// You may edit this file to customize your Dashboard widget.

var url = new Array;
var reportname;
var reports;
var type;
var utime = 0;
var intid;
var login;
var password;
var reportid;
var pandoraloc = "https://your-server.local/pandora_console";
var time = new Date; //Time object, returns milliseconds
var loginchanged = 0;
//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//
function load()
{
    setupParts();
	
	login = widget.preferenceForKey("login");
	password = widget.preferenceForKey("password");
	reportid = widget.preferenceForKey("reportid");
	pandoraloc = widget.preferenceForKey("pandoraloc");
	
	document.getElementById('login').value = login;
	document.getElementById('password').value = password;
	document.getElementById('reportid').value = reportid;
	document.getElementById('url').value = pandoraloc;
	setReportName("Loading...");
}

function setReportName (value) {
	document.getElementById('report_name').innerText = value;
}

//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function remove()
{
	hide();
	delete url;
	delete reportname;
	delete reports;
	delete type;
	delete utime;
	delete intid;
	delete login;
	delete password;
	delete reportid;
	delete pandoraloc;
	// Stop any timers to prevent CPU usage
    // Remove any preferences as needed
    // widget.setPreferenceForKey(null, createInstancePreferenceKey("your-key"));
}

//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{
	// Stop any timers to prevent CPU usage
	clearInterval(intid);
}

//
// Function: show()
// Called when the widget has been shown
//
function show()
{
	if (!intid) {
		intid = setInterval("show()",300000);
	}
	
	if (loginchanged == 1) {
		widget.setPreferenceForKey(login,"login");
		widget.setPreferenceForKey(password,"password");
		widget.setPreferenceForKey(pandoraloc,"pandoraloc");
		widget.setPreferenceForKey(reportid,"reportid");
		loginchanged = 0;
	}
	
	if (login && password && pandoraloc && reportid) {
		getReport();
		var drawings = 0;
	} else {
		errorhandler ("Missing variable");
		return false;
	}
	
	if (!reports) {
		errorhandler ("Empty report");
		return false;
	}

	for (var i = 0; i < reports.length; i++) {
		if (drawings >= 4) {
			return; //We don't want to keep handling the reports if 4 were already drawn.
		}
		var report = reports[i];
		var type = report.getElementsByTagName('type')[0].firstChild.data;
		var period = report.getElementsByTagName('period')[0].firstChild.data;
		var module = "";
		var agent = "";
		
		function showAgentModule (agent, module, drawings) {
			document.getElementById('agent-value'+drawings).innerText = agent;
			document.getElementById('agent-text'+drawings).style.visibility = "visible";
			document.getElementById('module-value'+drawings).innerText = module;
			document.getElementById('module-text'+drawings).style.visibility = "visible";	
		}
		
		switch (type) {
			case "sumatory":
			case "min_value":
			case "max_value":
			case "avg_value":
				module = report.getElementsByTagName('module')[0].firstChild.data;
				agent = report.getElementsByTagName('agent')[0].firstChild.data;
				data = report.getElementsByTagName('objdata')[0].firstChild.data;
				drawValue (data,drawings);
				showAgentModule (agent, module, drawings);
				drawings++;
			break;
			case "monitor_report":
				module = report.getElementsByTagName('module')[0].firstChild.data;
				agent = report.getElementsByTagName('agent')[0].firstChild.data;
				data = report.getElementsByTagName('bad')[0].firstChild.data;
				drawGauge (data, drawings, 100);
				showAgentModule (agent, module, drawings);
				drawings++;
			break;
			default:
				alert ("Not implemented: "+type);
				continue;
		}
	}
	//End for-loop
}

//
// Function: sync()
// Called when the widget has been synchronized with .Mac
//
function sync()
{
    // Retrieve any preference values that you need to be synchronized here
    // Use this for an instance key's value:
    // instancePreferenceValue = widget.preferenceForKey(null, createInstancePreferenceKey("your-key"));
    //
    // Or this for global key's value:
    // globalPreferenceValue = widget.preferenceForKey(null, "your-key");
}

//
// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
//
function showBack(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToBack");
    }

    front.style.display = "none";
    back.style.display = "block";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

//
// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
//
function showFront(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToFront");
    }

    front.style.display="block";
    back.style.display="none";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }

	if (loginchanged == 1) {
		login = document.getElementById('login').value;
		password = document.getElementById('password').value;
		reportid = document.getElementById('reportid').value;
		pandoraloc = document.getElementById('url').value;
	}
	utime = 0;
	setTimeout('show();', 0); //Execute show() asynchronously
}

function refreshButton(event) {
	utime = 0;
	setTimeout('show();', 0); //Execute show() asynchronously
}

function getResponseXml(xmlUrl) {
    var xmlHttp = new XMLHttpRequest();
	var textout = "";
	try { 
		xmlHttp.open("POST", xmlUrl['base'], false);
		xmlHttp.send(xmlUrl['params']);
	
		if(xmlHttp.readyState == 4 && xmlHttp.status == 200) {
			textout = xmlHttp.responseXML;
		}
	} 
	catch (err) {
			errorhandler (xmlUrl['base']);
	}
	return textout;
}

function getReport() {
	//Construct URL
	url['base'] = pandoraloc+"/operation/reporting/reporting_xml?id="+urlencode(reportid)+"&direct=1";
	url['params'] = "nick="+urlencode(login)+"&pass="+urlencode(password);
	
	curtime = parseInt(time.getTime()/1000);
	
	if (utime < curtime - 60) { //Don't hit it if it's younger than 60s
		var output = getResponseXml(url);
		if (output) {
			reportname = output.getElementsByTagName('name')[0].firstChild.data;
			reports = output.getElementsByTagName('object');
			utime = output.getElementsByTagName('generated')[0].getElementsByTagName('unix')[0].firstChild.data;
			
			setReportName(reportname);
		} else {
			errorhandler ("No output from getReport");
			//Reset these variables
			reports = "";
			utime = 0;
			reportname = "";
		}
	}
}

function errorhandler (error) {
	//This will handle the errors to be displayed on the dashboard
	document.getElementById('error_txt').innerText = error;
}

function drawValue (value, drawing) {
	var boxToChange = document.getElementById("num-box"+drawing);
	switch (value.length) {
		case 1:
		case 2:
			boxToChange.style.fontSize = "38pt";
			break;
		case 3:
			boxToChange.style.fontSize = "27pt";
			break;
		case 4:
			boxToChange.style.fontSize = "20pt";
			break;
		case 5:
			boxToChange.style.fontSize = "16pt";
			break;
		default:
			boxToChange.style.fontSize = "13pt";
			break;
	}
	boxToChange.innerText = value;
	boxToChange.style.visibility = "visible";
}

function drawGauge (value, drawing, max) {
	var gaugeToChange = document.getElementById("gauge-box"+drawing);
	// Gauge code
	gaugeToChange.style.visibility = "visible";
	gaugeToChange.object.setMinValue(max);
	gaugeToChange.object.setValue(value);
}


if (window.widget) {
    widget.onremove = remove;
    widget.onhide = hide;
    widget.onshow = show;
    widget.onsync = sync;
}